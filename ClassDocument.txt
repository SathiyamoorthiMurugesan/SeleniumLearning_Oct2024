Day 1 (07/10/2024)
* Eclipse basic
	* disadvantages of accessing and running a file using cmd promt
	* Eclipse is a 
		* Editor tool
		* it gives us a simple but advanced UI to view, edit and run our files in a very easy way.
		
Eclipse alternate tool - inteliJ, STS (Sprint tool suite), Visual Studio Code
		
*************************************************************************
Day 2 (08/10/2024)

Taluk office - class
rooms - methods/functions

Reception related things(table, phone, receptionist, computer) - static - belongs to the class

Paper, pen, water can, water bottle, table, chairs, chalan - anyone can access - public
Receptionist mobile, person's mobile/money/bike - private
Documents - protected
People - default

Access Modifier - public, private, protected and default

Variables
    10 people/chair/table or 20 people/chair/table or 5 people/chair/table
	- (10, 20 and 5)- variable values
	- people/chair/table - type- datatype
	- red table, red chairs or white chairs - naming - variable name

	chair redColor = 30;  --camel case format - myNameIsSathya - mynameissathya
	chair - datatype
	red - variable name 
	30 - variable value 
public chair red = 20;
private chair red = 2; 

VARIABLE COMMON SYNTAX 
	accessModifer datatype variableName = variableValue;


Method - room
	* Whatever happens inside is not visible to outside or other methods/rooms
	* We can bring things from reception/hall to a method
	* But we can not bring a thing from method/room to outside. In order to do that, we need to follow a process
		- RETURN TYPE
	* Most of the time method wont give us anything - VOID

METHOD COMMON SYNTAX 
	- AccessModifer returnType methodName() { }
	- public void incomeTaxCertificateProcess() {
		
		}

Taluk office - Class
	- It does a set of works
	- Methods are written inside a class

CLASS COMMON SYNTAX 
	- AccessModifier class(keyword) ClassName { }
	- public class TalukOffice {

		}
	
public class TalukOffice {
                                     
public chair red = 20;
private chair red = 2;      

	- public void incomeTaxCertificateProcess() {
		 
		}
	- public void MarriageCertificateProcess() {
		
		}

public chair red = 20;
private chair red = 2; 

	- private void staffRoom() {

		}
	- protected void importantDocumentsRoom() {

		}
		
	- default void washRoom() {
	
		}
		
	- void washRoom1() {
	
		}

public chair red = 20;
private chair red = 2; 
	
}

* incomeTaxCertificateProcess - camelCase
	- class names should start with CAPITAL LETTER and followed by camelCase
	- method/variable names should start with SMALL LETTER and followed by camelCase
	- all the java keywords starts with SMALL LETTER such as class, public, void etc.


People administration - package
Chennai Taluk office - Class - parent class
	below are sub classes of Chennai Taluk office 
	- Velachery Taluk office - Class 
		- Velachery east Taluk office - Class (He is sub class of Velachery class)
	- Tambaram Taluk office - Class
	- Guindy Taluk office - Class 

Chennai Taluk Office - Parent/Super class
Velachery Taluk Office - Parent class
Velachery East Taluk Office - Child/Sub class 

public class ChennaiTalukOffice() {}
public class VelacheryTalukOffice extends ChennaiTalukOffice { }
public class VelacheryEastTalukOffice extends VelacheryTalukOffice { }

We need someone or some office to create rules so that by using that every taluk office will work
For that, in Java, we use Interface 

We create rules in interface

COMMON SYNTAX FOR INTERFACE 
	- AccessModifier interface(Java keyword) InterfaceName { }
	- public interface PeopleAdministrationRules {
	
	}

**************************************************************
Day 3 (09/10/2024)


public interface PeopleAdministrationRules {
	
	public void incomeCertificateProcess();

	public void marriageCertificateProcess();
	
	}

public interface ChennaiEastPeopleAdminRules { 
	}


public interface ChennaiNorthPeopleAdminRules extends PeopleAdministrationRules { 
	}

public class ChennaiTalukOffice implements PeopleAdministrationRules {

}

public interface PeopleAdministrationRules implements ChennaiTalukOffice {

}

same entity - extends 
different entity - implements

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

ChennaiGovtHospital conducts medical camp inside the campus - This event equal to Object Creation or Object Initiation or Object Instantiation in Java

ClassName objectName/ObjectName = new  ClassName();
ChennaiGovtHospital MedicalCamp = new ChennaiGovtHospital();
ChennaiGovtHospital BloodDonationCamp = new ChennaiGovtHospital();
ChennaiGovtHospital EyeTestCamp = new ChennaiGovtHospital();

public class ChennaiGovtHospital {
	ChennaiGovtHospital MedicalCamp = new ChennaiGovtHospital();
	ChennaiGovtHospital EyeCamp = new ChennaiGovtHospital();
	ChennaiGovtHospital DentalCamp = new ChennaiGovtHospital();
}

public class ChennaiPoliceStation { 
	ChennaiGovtHospital MedicalCamp = new ChennaiGovtHospital();
}

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Medical camp conducted by ChennaiGovtHospital is managed by a Clerk

This Clerk is equal to "CONSTRUCTOR" in java
	ChennaiGovtHospital MedicalCamp = new ChennaiGovtHospital();
		- ChennaiGovtHospital() - Constuctor

CONSTRUCTOR COMMON SYNTAX 
	- AccessModifier ClassName() { }
	- public ChennaiGovtHospital() { 
		}
		
METHOD SYNTAX
	- AccessModifier returnType methodName() {  }
	

1) Constructor do not have return type;
2) Constructor name should be as same as Class Name;
3) By default, each class has its own Constructor and we call it as DEFAULT CONSTRUCTOR;


STATIC  - keyword
		- belongs the class
		
	
	Reception chair, reception telephone, reception table, receptionist
	
Taluk Office receptionist

Within Class(Taluk Office) - receptionist - directly we can call them

Outside
Outside of Taluk Office and within PoliceStation - 
	- We call the TO receptionsit as TO receptionist
	- POlice Station receptionist
	
public chair red = 10 
static public chair red = 10;
public static chair red = 10;

public static void method1() {   }
static public void method2() {   }




Methods
static
Class
Access Modifier
Variables 
Package
Project
Interface
Object Creation
Constructor


ChennaiAdminstration - Project 
PeopleAdminstration - package
	ChennaiTO - class
	PeopleAdministrationRules - interface
	VelacheryTO - class
	VelacheryEastTO - class
	TambaramPeopleAdminRules - interface
	TambaramTO - class
	dummyDocument.txt
	Data.xls

HealthAdminstraction - package
	ChennaiGH - class
	HealthAdminRules - interface
	ChennaiNorth - class
	Chennai South - class
	HealthAdminRulesNorthAndSouth - interface
	
ChennaiBluePrint.txt
MyDocuments - folder
	
	

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


Project Structure 

Project
    sourceFolder
	- package1
		InterfaceA
		InterfaceB
		ClassA (Datatype/variables/methods)
			ClassAA 
			ClassAB
		ClassB
		ClassC
	- package2
		ClassA
		ClassB
		InterfaceC
	- package3
		ClassX
		ClassA

*************************************************************
Day 4 (10/10/2024)

* Class - It does a set of work. It consist of variables and methods. Each work would be done by methods. 

* Methods - It does specific job. It always written inside a class/interface

* Variable - it can have type(Data type) and posses a number or name;
			variables can have different access - access Modifier
			
* Access Modifier - defines where we can use a variable/method/class

* Interface - It contains rules most of the time. Sometimes it does some work too(means method).
			Interface is always followed by class/classes. 
			When class follows interface, class should do the rule written in the interfacebject

* package - contains class/classes/interface/interfaces/file/files/folder/folders

* Project - consist of package/packages/file/files/folder/folders/source(src)folder

src/main - development related codes and its supporting files
	java/resources
src/test - test case or testing related codes and its supporting files
	java/resources

* static - static means belongs to the class. If govt hospital is class, then hospital receptionist is a static member of that class. 
                 We can not seperate them. variables and methods can be static
			within a class - static can be used anywhere directly in the same (in a static method or in non-static method)
			Outside class - static can be used but alone with class name. (in a static method or in non-static method)

* Object (Creation or instantiation or initiation)  - E.g: Medical camp; 
			We create Object only for classes; Whenever we create object we copy whatever the class contains(except static)
			means, only non-static is copied
			Through object we can not call static things.

* Constructor - Object creation happens with the help of constructor
				constructor is available in different kind
				1. without any money/document
				2. only with money
				3. only with document
				4. with both money and document


*************************************************************

Day 5 (14/10/2024)

*****https://www.shellhacks.com/git-create-new-branch/****

Git basics

Git alternative tool - bitBucket, Azure, AWS

* helps to work on a same file by multiple person. 
* SCM - Source code management 

Original project is in our system, we use Eclipse to view and edit the project in easy manner

File Explorer view of our project - Local
Git view of our project - Remote 

Git Repository - Repo- Remote - Remote project

1) Create a Java project 
2) Add some packages and classes and some files 
3) In github.com, create a repository
4) In File explorer, go to your Java project 
5) From there open git bash andd type below commands
	* git init -- it will create a local git with master branch
	* git add .
	* git commit -m "some messages"
	* git remote add origin "repository's SSH path" - we are introducing online repository to local git 
	* git push origin master
	* git status
	
	* git config --global user.email "";
	
	
**********************************************************
Day 6 (15/10/2024)

Maven - Dependencies management tool

other such tools - Gradle, ant

	* Difficulties in adding a .jar file into our project
	* .M2 folder stores the dependencies added in pom.xml file
	* Maven projects gives us a proper project structure
	
resolution:-
	* Instead of Java project, create a maven project
	* All maven project consist pom.xml file
	* In pom.xml file, we add the required dependencies
		* groupId
		* artifactId
		* version
		* scope (optional)
	* Eg:-
		OnePlus - GroupID 
		Mobile - ArtifactID
		OnePlus11R - Version
	* Eg:-
		GroupID - selenium.org
		ArtifactID - selenium-java
		version - 4.20.1
		
* Home work
	* Create Maven project
	* push to git repo using git bash
	* delete project from your system
	* By using eclipse import the project directly from git(without RSA)
	* Add RSA and then import directly from git
	* Download the project from 
		* https://github.com/SathiyamoorthiMurugesan/ABC
		* Import this project into eclipse
		

1. Create a local project (add all the required files)
2. In github, create a repo
3. Open git bash from your project location
4. git init 
5. git add .
6. git commit  -m "message"
7. git remote add origin "git repo link"
8. git push -u origin master


		
************************************************************************************

Day 7 (16/10/2024)
		
Different ways to import a maven project into Eclipse 
	* clone the project using git bash and import the existing project into Eclipse 
	* clone the project using eclipse and followed by import the existing project into Eclipse
	* clone the project in git perspective and import the existing project into Eclipse
	* download the project into your local and import the existing project into Eclipse
	
* What is .gitignore file and how it works 

* How to access build path of a project

* How and why to update the maven project

* Run as 
	* Maven clean
	* Maven install
	
* In src/main/java
	* We keep development related files
* In src/main/resources
	* We keep utility files which is being used in development files
* In src/test/java
	* We keep test case files
* In src/test/resources
	* We keep utility files which is being used in test cases

* Create a Maven project, push it into Git and add collaborators

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


How to bring already existing project into your workspace/system

1. Copy the SSH of the git repo.
2. Eclipse - File - import - Project from Git
3. Clone URI
4. git@github.com:nirmalnehru2000/Second-sample.git
5. Choose branches to be cloned - choose all the branches
6. Path will be created in your local system. (git folder)
7. Choose the initial branch - master 
8. Select wizard - import existing eclipse project
9. Finish

Check git perspective 
window - perspective - others - git 

1. How to clone a project - using eclipse 
2. How to pull a change from a project branch into your local branch
3. How to import a existing maven project into your eclipse view 
4. How to clone a project - using git bash 


************************************************************************************

Day 8 (17/10/2024)

Class - important thing, through which we perform some task. Class may contains methods and variables

Method1 - A work
Method2 - B work
Method3 - C work ( A work + some other work = method1 + some other work)

redundant - repeatable 
reuse
No. of line will reduce 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Variables

Variables - shape and count/name
shape - datatype 



Syntax:-
	AccessModifier datatype variableName = variableValue
	public int a = 10;
	private String b = "xyz";
	
	people red = 10;
	people orange = "Sathya";
	
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Datatype: Its a classification of a data, which tells the compiler or interpreter 
about how the programmer intends to use the data.

1) Primitive
	a) boolean - yes or no OR true or false 
		* boolean aa = true; --> Variable declared and initialized
		* boolean ab;  --> Variable declared but not initiated.
			- default value will be assigned to ab is "false";
		* boolean cc;
			cc = true;
	
	b) Textual 
		1) char - a, b, c, A, B
			* char ba = 'a';
			* char bb = '1';
			* default value of char is null;
		2) byte - 
			byte x = 10;
	c) numeric 
		1) int 
			* int cc = 10;
			* default value = 0;
		2) short
			* short dd = 20;
			* default value = 0;
		3) double
			* double ee = 30d;
			* default value = 0;
		4) long
			* long ff = 20l;
			* default value = 0;
		5) float
			* float gg = 2.5f;
			* default value = 0;

2) Non Primitive
	d) String - In java, String is a Non-Primitive data type but at the same time its a Class.
		* String hh = "aA10@";
		* String ii = "In java, String is a Non-Primitive data type but at the same time its a Class.";
		* String jj = "null";
		* default = null;
	e) array
	
int a; - declare
a = 10; - define/initiate/assign
int a = 10 - declare and initiate

int a = 10;
deafult - access modifier
int - data type( primitive --> numeric)
a - variable/variableName;
10 - value posses by the variable/ value pointed by the variable

If you want 10, you need to call 'a' only. 

***************************************************************

Day 9 (18/10/2024)

How to create a class, nested classes with different access modifiers
How to create a interface, nested interfaces with different access modifiers
How to create non-static methods and static methods 
How to create variables 

********************************************************************
Day 10 (19/10/2024)

Different variables
How to create/call variables inside a method

Variables - Its a memory location that can hold values of a specific datatype.

Types of variables 
1. Local variable - 
	* Datatype declared/initiated within a method/constructor, for, if    -- block ({...})
	* scope of local variable is only within the block in which the variable is declared
	* initialization of local variable is mandatory
	* local variables can not be static
	{
	int a = 10;
	char c;
	c = '2';
	String sathya = "10";
	static int b = 10; -- we can not create like this.
	}
	
2. Instance variable/class variable/non-static variable
	* Declared within a class but outside of a block ({...})
	* Non- static variables
	* To access instance variables, we need to create object for that class
	
	classA {
	int a = 10; //class level non static variable
	String sathya = "10"; //class level non static variable
	
	method1() {
	int  aa = 10; // local variable
	
	sysout(sathya); // we can not use a non static like this. we need to create object
	// it should be written as 
	ClassA obj = new ClassA(); //object creation
	sysout(obj.a);
	}
	
	}
	
	
3. static variable
	* Declared within a class but outside of a block with "static" keyword
	* static keyword is used with variables and methods
	* To access this variable, dont need to create an object
	* within a class - static can be used anywhere directly (in a static method or in non-static method)
	* Outside class - static can be used but along with class name. (in a static method or in non-static method)
	
	static int a = 10;
	static String sathya = "10";
	public static int c = 200;
	
ClassA (TalukOffice) {

static int a = 10;
//a = receptionist;

method1() {
	print (a);
}

}


ClassB (Govt hospital) {

method2() {
print (ClassA.a);
//print (TalukOffice.receptionist)
}




**************************************************************************
Day 11 (21/10/2024)

*********Calling methods **********

A work - method1(); -- 100 lines of codes

B work - method2(); -- 100 lines of codes

C work - method3(); -- 250 lines of code 
	method3() is method1() + method2() + some other work

- Reuse of methods 
- duplicates and redundant codes - remove

AS OF NOW, WE HAVE SEEN TWO KIND OF METHODS
1. static methods 
2. non-static methods

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

//	We can create object of a class in another class 
//		* (eg: creating object for Class22 inside of CallingMethods1)
	
//	For reference: 
//		* Which method you are going to call is matters
//		* Which class you are going to call also matters
//		* static methods/variables always belongs to the class
	
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
	
//	With in A class
//		* Calling a static method from non-static method 
//				- Direct
//		* Calling a static method from static method 
//				- Direct
//		* Calling a non-static method from non-static method 
//				- Direct/ Object Creation
//		* Calling a non-static method from static method 
//				- Object Creation
	
//	withInAClass(from)		static			non-static
//	static 				    DIRECT          OBJECT CREATION
//	non-static              DIRECT          DIRECT/OBJECT CREATION
	
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

	
//	Outside a class
//	* Calling a static method of another class from non-static method 
//			- ClassName + static method name
//	* Calling a static method of another class from static method 
//			- ClassName + static method name
//	* Calling a non-static method of another class from non-static method 
//			- Object Creation
//	* Calling a non-static method of another class from static method 
//			- Object Creation
	
//	OutsideOfClass		static			   non-static
//	static 				CLASSNAME          OBJECT CREATION
//	non-static          CLASSNAME          OBJECT CREATION
	
//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
	
//	CONCLUSTION
//	When you are going to call a 
//		* Non-static - Object Creation
//		* static - direct(within a class) or along with class name (outside of class)

***********************************************************************************

Day 12 (22/10/2024)

Access Modifier
	* It defines where and who can use a method/variable/class
	1) default
	2) private
	3) protected
	4) public 
	
	Syntax = accessModifier dataType variableName/variable = variableValue (Could be local variable or non-static variable)
		   = static accessModifier dataType variableName/variable = variableValue (class level variable or static variable)
		   
	int a = 10; - default (no need to mention "default" word
	private int a = 10;
	protected int a = 10;
	public int a = 10;
	
	
	packageA
		class10 ( int a = 10)
			Class11 (same package of Class10 and sub class of Class10)
		class20 (same package but non sub of Class10)
	packageX
		classA (diff package and non sub class of Class10)
		classB10 (diff package and sub class of Class10)
		
	
How Class10 and other Classes can use variable 'a' based on its access modifier.

                                     				| default |  private  | protected  | public 
													|         |           |            | 
class10 ( int a = 10)                				| yes     | yes       | yes        | yes
									 				|         |           |            |
same package but sub class (class11)			 	| yes     | no        | yes        | yes 
									 				|         |           |            |
same package but NON sub class (class20) 			| yes     | no        | yes        | yes
									 				|         |           |            |
different package but sub class (classB10)			| no      | no        | yes        | yes
									 				|         |           |            |
different package but NON sub class (classA)		| no      | no        | no         | yes

ClassA {

int a = 10;
private int b = 100;
protected int c = 20;
public int d = 15

method1() {
ClassA obj = new ClassA();
print (obj.a); 
print (obj.b);
print (obj.c);
print (obj.d); 
}

}

ClassAA following ClassA {
or
ClassAA extends ClassA {

ClassA obj = new ClassA();
method1() {
print (obj.a); 
print (obj.b);
print (obj.c);
print (obj.d); 
}
}

ClassB {

ClassA obj = new ClassA();
method1() {
print (obj.a); 
print (obj.b);
print (obj.c);
print (obj.d); 
}
}


*******************************************************************************
Day 13 (23/10/2024)

Calling static variable/method in different classes

ClassA 
	static int a = 10;


within class 
	static method - direct
	non-static - direct 

Same package 

1) Sub class 
	static method - direct or with class name?
	non-static - direct or with class name?

2) Non sub class 
	static method - with class name
	non-static - with class name 

Different package 

1) Sub class 
	static method - direct or with class name?
	non-static - direct or with class name?

2) Non sub class 
	static method - with class name
	non-static - with class name 


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

JVM, JRE, JDK

our codes - English - .java
compile - .class - byte code (machine recognizable language). 
			it is available in target folder.


JVM - Java Virtual Machine 
* This can not be seen
* it starts the execution(creates Runtime Environment)
* It first checks for main method and executes the codes inside the main method
* It creates the code flow, in java the flow is called "Thread"  - "main Thread"
* JVM provides run time environment in which Java byte codes can be executed
* loads code| verifies code| execute code| provides run time environment

JRE - Java Runtime Environment
* Physically exist
* Contains JVM and set of libraries
* JVM uses these libraries to execute the codes

JDK - Java Developement kit
* It contains JVM, set of libraries and dev tools (JRE + dev tools)
* Used to develop and execute the codes
* Dev tools + debugger + compiler + java doc

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Java keywords
new, class, interface, abstract, all the access modifiers, data types, static, this, super, throw, throws, try, 
catch, final, finally, data type, if, for, while, break, continue, switch, case;

* dont create variables and method names using java predefined keywords 
* Java is case sensitive language (Sathya, sathya)
* java is a OOPs(Object Oriented Program) language
	* Java is not a 100% OOPs language

Naming conversion in java
* Should not use above things
* homepage - homePage (Camel case)

If you are creating package, method name
* should start with small letter followed by camel case

if you are creating class or interface
* should start with Captial letter followed by camel case

thisIsPackageName 
ThisIsClassName
ThisIsInterfaceName

thisIsMethodName
thisIsObjectName or ThisIsObjectName
thisIsVariableName

package, method, object, variable - starts with small letter
Class, Interface, Object - starts with Capital letter


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Methods in Java

1) main method (static method)

2) static method
3) non static method

4) method with parameter
5) method without parameter

6) method with return type
7) method without return type

Currently we focus on 2 & 3;

public void method1() {

}

public static void method2() {

}

**** Using local variable outside the method**********

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Calling one method from another method

* How calling a method differentiate within a class or outside class

With in a class
1. calling static method/variable from non-static method - direct call
2. calling static method/variable from static method - direct call
3. calling non-static method/variable from non-static method - direct call or object creation
4. calling non-static method/variable from static method - Object creation 


Outside class
	1. calling static method/variable from non static method - using className
	2. calling static method/variable from static method - using className
	3. calling non-static method/variable from non-static method - Creating Object
	4. calling non-static method/variable from static method - Creating Object 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

//		Two ways to bring out the local variable value, outside of that method
//		return type concept  - later 
//		By assigning local variable value to class level static or non static variables

&&&&&&&&&&&&&&&&&&&

How to read object's suggestions.

**************************************************************

Day 14 (24/10/2024)


Object creation - to call non-static members

Within class we can have both static and non-static member. 

1) We create object only for class.
2) In order to access non static members of a class, we create object and through the object,
		we can access the non-statics(methods and variables)
3) We can create object of a class inside the same class or in any other class
4) We can create multiple Objects for a single class (within class or outside class)

Syntax:-
ClassName objectVariableName = new ClassName();
ClassA anyName = new ClassName();

GovtHospital medicalCamp = new GovtHospital();
GovtHospital eyeCamp = new GovtHospital();
Inside PoliceStation class  - GovtHospital medicalCamp = new GovtHospital();

Objection definition - 
Whenever we create an Object for a class, whatever non-static members(methods and variables) 
present in that class will be copied and stored in heap memory.
 
We call non-static members through Object creation only.
				
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

What is heap memory? 

Memory Management

Heap memory
Stack memory
SCP (String Constant Pool - A part of heap memory)

ClassA obj1 = new ClassA();

ClassA - Reference Class Name
Obj1 - Object variable
new = key word to create an obj
ClassA() - Constructor or Object creation or instance creation

* Whenever we create an object for a class, whatever non-static variables and methods present in that class will be copied to heap memory
* Object variable or instance variable, is stored in stack memory 
* We can create multiple object for a single class

public class ClassA {

int a = 10; 
static int c = 20;

public void method1() {
	ClassA obj1 = new ClassA();
	sysout(obj1.a);
	
	ClassA obj3 = new ClassA();
	ClassA obj4 = new ClassA();
}

public void method2() {
	ClassA obj2 = new ClassA();
	sysout(obj1.a);
}

}

	stack memory			Heap memory
	obj1.				a = 10; method1(), method2();
	obj2				a = 10; method1(), method2();
	obj3				a = 10; method1(), method2(); 
	
	* In heap memory, only one copy of every class is available if you create multiple object 
		for that class. So that we can save the memory space in heap memory.
	
	
public class ClassA {
int a = 10;
}

int a = 10; //class level non static
* a = 10 - When it comes to variable,  the variable and its value, 
				both will be stored in specific stack memory 

SCP:- String constant pool (its a part of Heap memory)
There are two ways to create String in Java
1. String Literals
2. Object creation

String Literals
	String Sathya = "1000"; 
	
Sathya - Stack
1000 - SCP of Heap memory 
	
Object creation for String
	ClassA obj1 = new ClassA(); //its simple object creation
	String Sathya = new String("1000"); //parameterized object creation

Sathya - Stack memeory
1000 and non static methods/variables in String class - Heap memory 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

*****We will see it later******

String immutable:-

String str = "Sathya";
String str1 = "Sathya";
String str2 = "Ranjith";

In Memory it looks like
stack 		SCP
str			Sathya 
str1 		
str2 		Ranjith

str1 = str1 + str2;
str1 = SathyaRanjith

After manipulation what we think
stack 		SCP
str			SathyaRanjith
str1 		
str2 		Ranjith

But what really happens in SCP memory.
Whenever we manipulate String variable, String value never get changed. 
Simply a new value is assigned to the manipulated String variable.

stack 		SCP
str			Sathya
str1 		SathyaRanjith
str2 		Ranjith

str = str1 + str2;

In SCP, after manipulation

stack 		SCP
str			SathyaRanjithRanjith ("Sathya" - will be in SCP but no one is looking for him)
str1 		SathyaRanjith
str2 		Ranjith

Unused Object "Sathya" in the memory will be cleared after sometime by Java Garbage collection process

****************************************************

Day 15 (25/10/2024)

Data types as variables:-
Variables in Java

Based on where we create our data types or variable names, we categories variables in 3 types 

1. Local variable
2. Class level or instance variable or non-static variable
3. static variable

Variables as parameters in detail
	* Parameterized variables are considered as local variables.
	* It helped to run a single method with multiple values of given data type.
	* Parameterized variables can be anything, such as Primitive, non primitive, Class, Interface, Object
	* Generally we can not write two or methods with same method name. 
		But we can achieve it using parameters


****************************************************

Day 16 (26/10/2024)

Variables as return type




****************************************************

Day 17 (28/10/2024)

Class a variable and return type


****************************************************

Day 18 (29/10/2024)

Class a variable and return type - rewind

homework about parameters and return type
How to read property file

****************************************************

Day 19 (04/11/2024)

Constructor basics

Final variable
	* Usage of Constructor in Final variable
	
*************************************************

Day 20 (05/11/2024)

String basics
String immutable 

***********************************************












